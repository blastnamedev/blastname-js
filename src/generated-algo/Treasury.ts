/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Interface } from "@ethersproject/abi";
import { Signer } from "@ethersproject/abstract-signer";
import { BytesLike } from "@ethersproject/bytes";
import { BigNumber, BigNumberish } from "@ethersproject/bignumber";
import { BaseContract, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction } from "@ethersproject/contracts";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TreasuryInterface extends Interface {
  functions: {
    "DENOMINATOR()": FunctionFragment;
    "allocateSeigniorage()": FunctionFragment;
    "bank()": FunctionFragment;
    "bankAllocateSeigniorage(uint256)": FunctionFragment;
    "bankRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "bankSetLockUp(uint256,uint256)": FunctionFragment;
    "bankSetOperator(address)": FunctionFragment;
    "bnd()": FunctionFragment;
    "bns()": FunctionFragment;
    "epoch()": FunctionFragment;
    "isMigrated()": FunctionFragment;
    "maxSupplyExpansionPercent()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "migrated()": FunctionFragment;
    "nextEpochPoint()": FunctionFragment;
    "operator()": FunctionFragment;
    "period()": FunctionFragment;
    "recoverUnsupported(address,uint256,address)": FunctionFragment;
    "seigniorageBankPercent()": FunctionFragment;
    "setBank(address)": FunctionFragment;
    "setMaxSupplyExpansionPercents(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setSeigniorageBankPercent(uint256)": FunctionFragment;
    "setTreasuryWallet(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "treasuryWallet()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DENOMINATOR"
      | "allocateSeigniorage"
      | "bank"
      | "bankAllocateSeigniorage"
      | "bankRecoverUnsupported"
      | "bankSetLockUp"
      | "bankSetOperator"
      | "bnd"
      | "bns"
      | "epoch"
      | "isMigrated"
      | "maxSupplyExpansionPercent"
      | "migrate"
      | "migrated"
      | "nextEpochPoint"
      | "operator"
      | "period"
      | "recoverUnsupported"
      | "seigniorageBankPercent"
      | "setBank"
      | "setMaxSupplyExpansionPercents"
      | "setOperator"
      | "setSeigniorageBankPercent"
      | "setTreasuryWallet"
      | "startTime"
      | "treasuryWallet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bankAllocateSeigniorage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bankRecoverUnsupported",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bankSetLockUp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bankSetOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "bnd", values?: undefined): string;
  encodeFunctionData(functionFragment: "bns", values?: undefined): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMigrated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "migrated", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextEpochPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverUnsupported",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "seigniorageBankPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupplyExpansionPercents",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeigniorageBankPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bankAllocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bankRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bankSetLockUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bankSetOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMigrated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigniorageBankPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupplyExpansionPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeigniorageBankPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;

  events: {
    "BankFunded(uint256,uint256)": EventFragment;
    "ExpansionRateChanged(uint256)": EventFragment;
    "Migration(address)": EventFragment;
    "NewEpoch(uint256,uint256,uint256)": EventFragment;
    "TreasuryFunded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BankFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpansionRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFunded"): EventFragment;
}

export interface BankFundedEventObject {
  timestamp: BigNumber;
  seigniorage: BigNumber;
}
export type BankFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BankFundedEventObject
>;

export type BankFundedEventFilter = TypedEventFilter<BankFundedEvent>;

export interface ExpansionRateChangedEventObject {
  maxSupplyExpansionPercent: BigNumber;
}
export type ExpansionRateChangedEvent = TypedEvent<
  [BigNumber],
  ExpansionRateChangedEventObject
>;

export type ExpansionRateChangedEventFilter =
  TypedEventFilter<ExpansionRateChangedEvent>;

export interface MigrationEventObject {
  target: string;
}
export type MigrationEvent = TypedEvent<[string], MigrationEventObject>;

export type MigrationEventFilter = TypedEventFilter<MigrationEvent>;

export interface NewEpochEventObject {
  epoch: BigNumber;
  oldBNDSupply: BigNumber;
  newBNDSupply: BigNumber;
}
export type NewEpochEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  NewEpochEventObject
>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface TreasuryFundedEventObject {
  timestamp: BigNumber;
  seigniorage: BigNumber;
}
export type TreasuryFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TreasuryFundedEventObject
>;

export type TreasuryFundedEventFilter = TypedEventFilter<TreasuryFundedEvent>;

export interface Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bank(overrides?: CallOverrides): Promise<[string]>;

    bankAllocateSeigniorage(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bankRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bankSetLockUp(
      _withdrawLockupEpochs: PromiseOrValue<BigNumberish>,
      _rewardLockupEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bankSetOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bnd(overrides?: CallOverrides): Promise<[string]>;

    bns(overrides?: CallOverrides): Promise<[string]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    isMigrated(overrides?: CallOverrides): Promise<[boolean]>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrated(overrides?: CallOverrides): Promise<[boolean]>;

    nextEpochPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seigniorageBankPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBank(
      _bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeigniorageBankPercent(
      _seigniorageBankPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryWallet(
      _treasuryWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryWallet(overrides?: CallOverrides): Promise<[string]>;
  };

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  allocateSeigniorage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bank(overrides?: CallOverrides): Promise<string>;

  bankAllocateSeigniorage(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bankRecoverUnsupported(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bankSetLockUp(
    _withdrawLockupEpochs: PromiseOrValue<BigNumberish>,
    _rewardLockupEpochs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bankSetOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bnd(overrides?: CallOverrides): Promise<string>;

  bns(overrides?: CallOverrides): Promise<string>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  isMigrated(overrides?: CallOverrides): Promise<boolean>;

  maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrated(overrides?: CallOverrides): Promise<boolean>;

  nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  recoverUnsupported(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seigniorageBankPercent(overrides?: CallOverrides): Promise<BigNumber>;

  setBank(
    _bank: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSupplyExpansionPercents(
    _maxSupplyExpansionPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeigniorageBankPercent(
    _seigniorageBankPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryWallet(
    _treasuryWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryWallet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(overrides?: CallOverrides): Promise<void>;

    bank(overrides?: CallOverrides): Promise<string>;

    bankAllocateSeigniorage(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bankRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bankSetLockUp(
      _withdrawLockupEpochs: PromiseOrValue<BigNumberish>,
      _rewardLockupEpochs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bankSetOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bnd(overrides?: CallOverrides): Promise<string>;

    bns(overrides?: CallOverrides): Promise<string>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrated(overrides?: CallOverrides): Promise<boolean>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrated(overrides?: CallOverrides): Promise<boolean>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    recoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    seigniorageBankPercent(overrides?: CallOverrides): Promise<BigNumber>;

    setBank(
      _bank: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeigniorageBankPercent(
      _seigniorageBankPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryWallet(
      _treasuryWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryWallet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BankFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): BankFundedEventFilter;
    BankFunded(timestamp?: null, seigniorage?: null): BankFundedEventFilter;

    "ExpansionRateChanged(uint256)"(
      maxSupplyExpansionPercent?: null
    ): ExpansionRateChangedEventFilter;
    ExpansionRateChanged(
      maxSupplyExpansionPercent?: null
    ): ExpansionRateChangedEventFilter;

    "Migration(address)"(
      target?: PromiseOrValue<string> | null
    ): MigrationEventFilter;
    Migration(target?: PromiseOrValue<string> | null): MigrationEventFilter;

    "NewEpoch(uint256,uint256,uint256)"(
      epoch?: null,
      oldBNDSupply?: null,
      newBNDSupply?: null
    ): NewEpochEventFilter;
    NewEpoch(
      epoch?: null,
      oldBNDSupply?: null,
      newBNDSupply?: null
    ): NewEpochEventFilter;

    "TreasuryFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TreasuryFundedEventFilter;
    TreasuryFunded(
      timestamp?: null,
      seigniorage?: null
    ): TreasuryFundedEventFilter;
  };

  estimateGas: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<BigNumber>;

    bankAllocateSeigniorage(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bankRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bankSetLockUp(
      _withdrawLockupEpochs: PromiseOrValue<BigNumberish>,
      _rewardLockupEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bankSetOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bnd(overrides?: CallOverrides): Promise<BigNumber>;

    bns(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrated(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrated(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    recoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seigniorageBankPercent(overrides?: CallOverrides): Promise<BigNumber>;

    setBank(
      _bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeigniorageBankPercent(
      _seigniorageBankPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryWallet(
      _treasuryWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bankAllocateSeigniorage(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bankRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bankSetLockUp(
      _withdrawLockupEpochs: PromiseOrValue<BigNumberish>,
      _rewardLockupEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bankSetOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMigrated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextEpochPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverUnsupported(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seigniorageBankPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBank(
      _bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeigniorageBankPercent(
      _seigniorageBankPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryWallet(
      _treasuryWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
