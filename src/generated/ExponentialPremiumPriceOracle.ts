/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Interface } from "@ethersproject/abi";
import { Signer } from "@ethersproject/abstract-signer";
import { BytesLike } from "@ethersproject/bytes";
import { BigNumber, BigNumberish } from "@ethersproject/bignumber";
import { BaseContract, CallOverrides, PopulatedTransaction } from "@ethersproject/contracts";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPriceOracle {
  export type PriceStruct = {
    base: PromiseOrValue<BigNumberish>;
    premium: PromiseOrValue<BigNumberish>;
  };

  export type PriceStructOutput = [BigNumber, BigNumber] & {
    base: BigNumber;
    premium: BigNumber;
  };
}

export interface ExponentialPremiumPriceOracleInterface
  extends Interface {
  functions: {
    "decayedPremium(uint256,uint256)": FunctionFragment;
    "premium(string,uint256,uint256)": FunctionFragment;
    "price1Letter()": FunctionFragment;
    "price2Letter()": FunctionFragment;
    "price3Letter()": FunctionFragment;
    "price4Letter()": FunctionFragment;
    "priceFlat()": FunctionFragment;
    "priceRegister(string,uint256,uint256)": FunctionFragment;
    "priceRenewal(string,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "usdOracle()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decayedPremium"
      | "premium"
      | "price1Letter"
      | "price2Letter"
      | "price3Letter"
      | "price4Letter"
      | "priceFlat"
      | "priceRegister"
      | "priceRenewal"
      | "supportsInterface"
      | "usdOracle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decayedPremium",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "premium",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "price1Letter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price2Letter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price3Letter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price4Letter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFlat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceRegister",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceRenewal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "usdOracle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "decayedPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price1Letter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price2Letter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price3Letter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price4Letter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFlat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceRenewal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdOracle", data: BytesLike): Result;

  events: {
    "RentPriceChanged(uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RentPriceChanged"): EventFragment;
}

export interface RentPriceChangedEventObject {
  prices: BigNumber[];
}
export type RentPriceChangedEvent = TypedEvent<
  [BigNumber[]],
  RentPriceChangedEventObject
>;

export type RentPriceChangedEventFilter =
  TypedEventFilter<RentPriceChangedEvent>;

export interface ExponentialPremiumPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExponentialPremiumPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the premium price at current time elapsed
     * @param elapsed time past since expiry
     * @param startPremium starting price
     */
    decayedPremium(
      startPremium: PromiseOrValue<BigNumberish>,
      elapsed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the pricing premium in wei.
     */
    premium(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    price1Letter(overrides?: CallOverrides): Promise<[BigNumber]>;

    price2Letter(overrides?: CallOverrides): Promise<[BigNumber]>;

    price3Letter(overrides?: CallOverrides): Promise<[BigNumber]>;

    price4Letter(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFlat(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the price to register or renew a name.
     * @param duration How long the name is being registered or extended for, in seconds.
     * @param expires When the name presently expires (0 if this is a new registration).
     * @param name The name being registered or renewed.
     */
    priceRegister(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPriceOracle.PriceStructOutput]>;

    priceRenewal(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPriceOracle.PriceStructOutput]>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    usdOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Returns the premium price at current time elapsed
   * @param elapsed time past since expiry
   * @param startPremium starting price
   */
  decayedPremium(
    startPremium: PromiseOrValue<BigNumberish>,
    elapsed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the pricing premium in wei.
   */
  premium(
    name: PromiseOrValue<string>,
    expires: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  price1Letter(overrides?: CallOverrides): Promise<BigNumber>;

  price2Letter(overrides?: CallOverrides): Promise<BigNumber>;

  price3Letter(overrides?: CallOverrides): Promise<BigNumber>;

  price4Letter(overrides?: CallOverrides): Promise<BigNumber>;

  priceFlat(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the price to register or renew a name.
   * @param duration How long the name is being registered or extended for, in seconds.
   * @param expires When the name presently expires (0 if this is a new registration).
   * @param name The name being registered or renewed.
   */
  priceRegister(
    name: PromiseOrValue<string>,
    expires: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPriceOracle.PriceStructOutput>;

  priceRenewal(
    name: PromiseOrValue<string>,
    expires: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPriceOracle.PriceStructOutput>;

  supportsInterface(
    interfaceID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  usdOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Returns the premium price at current time elapsed
     * @param elapsed time past since expiry
     * @param startPremium starting price
     */
    decayedPremium(
      startPremium: PromiseOrValue<BigNumberish>,
      elapsed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the pricing premium in wei.
     */
    premium(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price1Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price2Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price3Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price4Letter(overrides?: CallOverrides): Promise<BigNumber>;

    priceFlat(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the price to register or renew a name.
     * @param duration How long the name is being registered or extended for, in seconds.
     * @param expires When the name presently expires (0 if this is a new registration).
     * @param name The name being registered or renewed.
     */
    priceRegister(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPriceOracle.PriceStructOutput>;

    priceRenewal(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPriceOracle.PriceStructOutput>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usdOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RentPriceChanged(uint256[])"(prices?: null): RentPriceChangedEventFilter;
    RentPriceChanged(prices?: null): RentPriceChangedEventFilter;
  };

  estimateGas: {
    /**
     * Returns the premium price at current time elapsed
     * @param elapsed time past since expiry
     * @param startPremium starting price
     */
    decayedPremium(
      startPremium: PromiseOrValue<BigNumberish>,
      elapsed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the pricing premium in wei.
     */
    premium(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price1Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price2Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price3Letter(overrides?: CallOverrides): Promise<BigNumber>;

    price4Letter(overrides?: CallOverrides): Promise<BigNumber>;

    priceFlat(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the price to register or renew a name.
     * @param duration How long the name is being registered or extended for, in seconds.
     * @param expires When the name presently expires (0 if this is a new registration).
     * @param name The name being registered or renewed.
     */
    priceRegister(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceRenewal(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the premium price at current time elapsed
     * @param elapsed time past since expiry
     * @param startPremium starting price
     */
    decayedPremium(
      startPremium: PromiseOrValue<BigNumberish>,
      elapsed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the pricing premium in wei.
     */
    premium(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price1Letter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price2Letter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price3Letter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price4Letter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFlat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the price to register or renew a name.
     * @param duration How long the name is being registered or extended for, in seconds.
     * @param expires When the name presently expires (0 if this is a new registration).
     * @param name The name being registered or renewed.
     */
    priceRegister(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceRenewal(
      name: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
